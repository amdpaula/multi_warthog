<?xml version="1.0"?>

<!-- This file creates the sensor fusion node, and the navigation node. -->

<launch>
  <arg name="ns"    default="warthog"/>
  <arg name="x"     default="0"/>
  <arg name="y"     default="0"/>
  <arg name="z"     default="0"/>
  <arg name="use_move_base"  default="true"/>
  <arg name="use_fake_localization" default="true"/>

  <!-- Robot localisation, takes IMU and wheel odometry to form a single localisation
       estimate. This is the local filter, providing the odom to base_link transformation.
  <node pkg="robot_localization" type="ekf_localization_node" name="local_ekf_localization" ns="$(arg ns)">
    <rosparam command="load" file="$(find multi_jackal_nav)/params/local_ekf.yaml"/>
    <param name="map_frame"       value="$(arg ns)/map"/>
    <param name="odom_frame"      value="$(arg ns)/odom"/>
    <param name="base_link_frame" value="$(arg ns)/base_link"/>
    <param name="world_frame"     value="$(arg ns)/odom"/>
    <remap from="odometry/filtered" to="odometry/local_filtered"/>
  </node>
  NO NEED TO LAUNCH THIS LOCAL FILTER AS ONE IS ALREADY IMPLEMENTED BY WARTHOG_CONTROL -->

  <!-- Fake localization, takes pose from Gazebo's ground truth and forwards it to move base -->

  <arg name="global_frame_id"   default="$(arg ns)/map"/>
  <arg name="odom_frame_id"     default="$(arg ns)/odom"/>
  <arg name="base_frame_id"     default="$(arg ns)/base_link"/>

  <group if="$(arg use_fake_localization)" ns="$(arg ns)">
    <node pkg="fake_localization" type="fake_localization" name="fake_localization" output="screen"/>
        <!--
        <param name="odom_frame_id"       value="$(arg ns)/odom"/>
      -->
        <param name="fake_localization/odom_frame_id"       value="$(arg odom_frame_id)"/>
        <param name="fake_localization/base_frame_id"       value="$(arg base_frame_id)"/>
  </group>

  <!-- Move base. Takes desired location commands and sends velocity commands to get it there. -->
  <group if="$(arg use_move_base)">
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" ns="$(arg ns)" output="screen">
      <rosparam file="$(find multi_warthog_nav)/params/costmap_common_params.yaml" command="load" ns="global_costmap" />
      <rosparam file="$(find multi_warthog_nav)/params/costmap_common_params.yaml" command="load" ns="local_costmap" />
      <rosparam file="$(find multi_warthog_nav)/params/odom_nav_params/global_costmap_params.yaml" command="load" />
      <rosparam file="$(find multi_warthog_nav)/params/odom_nav_params/local_costmap_params.yaml"  command="load" />
      <rosparam file="$(find multi_warthog_nav)/params/base_local_planner_params.yaml" command="load" />
      <rosparam file="$(find multi_warthog_nav)/params/move_base_params.yaml" command="load" />
      <param name="base_global_planner" type="string" value="global_planner/GlobalPlanner" /> <!--value="navfn/NavfnROS" /> -->
      <param name="base_local_planner"                value="base_local_planner/TrajectoryPlannerROS"/>
      <param name="global_costmap/global_frame"       value="$(arg ns)/odom"/>
      <param name="global_costmap/robot_base_frame"   value="$(arg ns)/base_link"/>
      <param name="local_costmap/global_frame"        value="$(arg ns)/odom"/>
      <param name="local_costmap/robot_base_frame"    value="$(arg ns)/base_link"/>
      <remap from="odom"    to="odometry/filtered" />
      <remap from="cmd_vel" to="warthog_velocity_controller/cmd_vel"/>
    </node>
  </group>

</launch>
